// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: lead.sql

package repository

import (
	"context"
)

const createLead = `-- name: CreateLead :one
INSERT INTO leads (name, email, phone, origin)
VALUES ($1, $2, $3, $4)
    RETURNING id, name, email, phone, origin, is_active, created_at, updated_at
`

type CreateLeadParams struct {
	Name   string
	Email  string
	Phone  string
	Origin OriginLeadsEnum
}

func (q *Queries) CreateLead(ctx context.Context, arg CreateLeadParams) (Lead, error) {
	row := q.db.QueryRowContext(ctx, createLead,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Origin,
	)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Origin,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLeadByID = `-- name: DeleteLeadByID :one
DELETE
FROM leads
WHERE id = $1
    RETURNING id, name, email, phone, origin, is_active, created_at, updated_at
`

func (q *Queries) DeleteLeadByID(ctx context.Context, id int32) (Lead, error) {
	row := q.db.QueryRowContext(ctx, deleteLeadByID, id)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Origin,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLeadByEmail = `-- name: GetLeadByEmail :one
SELECT id, name, email, phone, origin, is_active, created_at, updated_at
FROM leads
WHERE email = $1
`

func (q *Queries) GetLeadByEmail(ctx context.Context, email string) (Lead, error) {
	row := q.db.QueryRowContext(ctx, getLeadByEmail, email)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Origin,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLeadByID = `-- name: GetLeadByID :one
SELECT id, name, email, phone, origin, is_active, created_at, updated_at
FROM leads
WHERE id = $1
`

func (q *Queries) GetLeadByID(ctx context.Context, id int32) (Lead, error) {
	row := q.db.QueryRowContext(ctx, getLeadByID, id)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Origin,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLeads = `-- name: ListLeads :many
SELECT id, name, email, phone, origin, is_active, created_at, updated_at
FROM leads
`

func (q *Queries) ListLeads(ctx context.Context) ([]Lead, error) {
	rows, err := q.db.QueryContext(ctx, listLeads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lead{}
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Origin,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
