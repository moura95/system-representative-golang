// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: payment_receipt.sql

package repository

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createPaymentReceipt = `-- name: CreatePaymentReceipt :one
INSERT INTO payment_receipt (representative_id,status, type_payment,description, amount, expiration_date,payment_date,doc_number,recipient,payment_form,installment,interval_days,additional_info)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10,$11,$12,$13)
    RETURNING id, representative_id, type_payment, status, description, amount, expiration_date, payment_date, doc_number, recipient, payment_form, is_active, installment, interval_days, created_at, updated_at, additional_info
`

type CreatePaymentReceiptParams struct {
	RepresentativeID int32
	Status           PaymentReceiptStatus
	TypePayment      PaymentReceiptType
	Description      string
	Amount           string
	ExpirationDate   sql.NullTime
	PaymentDate      sql.NullTime
	DocNumber        sql.NullString
	Recipient        sql.NullString
	PaymentForm      PaymentReceiptFormType
	Installment      int32
	IntervalDays     int32
	AdditionalInfo   sql.NullString
}

func (q *Queries) CreatePaymentReceipt(ctx context.Context, arg CreatePaymentReceiptParams) (PaymentReceipt, error) {
	row := q.db.QueryRowContext(ctx, createPaymentReceipt,
		arg.RepresentativeID,
		arg.Status,
		arg.TypePayment,
		arg.Description,
		arg.Amount,
		arg.ExpirationDate,
		arg.PaymentDate,
		arg.DocNumber,
		arg.Recipient,
		arg.PaymentForm,
		arg.Installment,
		arg.IntervalDays,
		arg.AdditionalInfo,
	)
	var i PaymentReceipt
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.TypePayment,
		&i.Status,
		&i.Description,
		&i.Amount,
		&i.ExpirationDate,
		&i.PaymentDate,
		&i.DocNumber,
		&i.Recipient,
		&i.PaymentForm,
		&i.IsActive,
		&i.Installment,
		&i.IntervalDays,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const deleteFilePaymentReceiptByID = `-- name: DeleteFilePaymentReceiptByID :one
DELETE
FROM files_payment_receipt
WHERE id = $1
    RETURNING id, payment_receipt_id, url_file, created_at, updated_at
`

func (q *Queries) DeleteFilePaymentReceiptByID(ctx context.Context, id int32) (FilesPaymentReceipt, error) {
	row := q.db.QueryRowContext(ctx, deleteFilePaymentReceiptByID, id)
	var i FilesPaymentReceipt
	err := row.Scan(
		&i.ID,
		&i.PaymentReceiptID,
		&i.UrlFile,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePaymentReceiptByID = `-- name: DeletePaymentReceiptByID :one
DELETE
FROM payment_receipt
WHERE id = $1
    RETURNING id, representative_id, type_payment, status, description, amount, expiration_date, payment_date, doc_number, recipient, payment_form, is_active, installment, interval_days, created_at, updated_at, additional_info
`

func (q *Queries) DeletePaymentReceiptByID(ctx context.Context, id int32) (PaymentReceipt, error) {
	row := q.db.QueryRowContext(ctx, deletePaymentReceiptByID, id)
	var i PaymentReceipt
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.TypePayment,
		&i.Status,
		&i.Description,
		&i.Amount,
		&i.ExpirationDate,
		&i.PaymentDate,
		&i.DocNumber,
		&i.Recipient,
		&i.PaymentForm,
		&i.IsActive,
		&i.Installment,
		&i.IntervalDays,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const getPaymentReceiptByID = `-- name: GetPaymentReceiptByID :one
SELECT pr.id, pr.representative_id, pr.type_payment, pr.status, pr.description, pr.amount, pr.expiration_date, pr.payment_date, pr.doc_number, pr.recipient, pr.payment_form, pr.is_active, pr.installment, pr.interval_days, pr.created_at, pr.updated_at, pr.additional_info,
       json_agg(json_build_object('file_id', fpr.id, 'payment_receipt_id', fpr.id,  'url_file', fpr.url_file)) AS files
FROM payment_receipt AS pr
         LEFT JOIN files_payment_receipt AS fpr ON pr.id = fpr.payment_receipt_id
WHERE pr.id = $1 and pr.representative_id = $2
GROUP BY pr.id
`

type GetPaymentReceiptByIDParams struct {
	ID               int32
	RepresentativeID int32
}

type GetPaymentReceiptByIDRow struct {
	ID               int32
	RepresentativeID int32
	TypePayment      PaymentReceiptType
	Status           PaymentReceiptStatus
	Description      string
	Amount           string
	ExpirationDate   sql.NullTime
	PaymentDate      sql.NullTime
	DocNumber        sql.NullString
	Recipient        sql.NullString
	PaymentForm      PaymentReceiptFormType
	IsActive         bool
	Installment      int32
	IntervalDays     int32
	CreatedAt        time.Time
	UpdatedAt        time.Time
	AdditionalInfo   sql.NullString
	Files            json.RawMessage
}

func (q *Queries) GetPaymentReceiptByID(ctx context.Context, arg GetPaymentReceiptByIDParams) (GetPaymentReceiptByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPaymentReceiptByID, arg.ID, arg.RepresentativeID)
	var i GetPaymentReceiptByIDRow
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.TypePayment,
		&i.Status,
		&i.Description,
		&i.Amount,
		&i.ExpirationDate,
		&i.PaymentDate,
		&i.DocNumber,
		&i.Recipient,
		&i.PaymentForm,
		&i.IsActive,
		&i.Installment,
		&i.IntervalDays,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
		&i.Files,
	)
	return i, err
}

const listPaymentReceiptByRepresentativeID = `-- name: ListPaymentReceiptByRepresentativeID :many
SELECT pr.id, pr.representative_id, pr.type_payment, pr.status, pr.description, pr.amount, pr.expiration_date, pr.payment_date, pr.doc_number, pr.recipient, pr.payment_form, pr.is_active, pr.installment, pr.interval_days, pr.created_at, pr.updated_at, pr.additional_info,
       json_agg(json_build_object('file_id', fpr.id, 'payment_receipt_id', fpr.id,  'url_file', fpr.url_file)) AS files
FROM payment_receipt AS pr
         LEFT JOIN files_payment_receipt AS fpr ON pr.id = fpr.payment_receipt_id
WHERE pr.representative_id = $1
GROUP BY pr.id
`

type ListPaymentReceiptByRepresentativeIDRow struct {
	ID               int32
	RepresentativeID int32
	TypePayment      PaymentReceiptType
	Status           PaymentReceiptStatus
	Description      string
	Amount           string
	ExpirationDate   sql.NullTime
	PaymentDate      sql.NullTime
	DocNumber        sql.NullString
	Recipient        sql.NullString
	PaymentForm      PaymentReceiptFormType
	IsActive         bool
	Installment      int32
	IntervalDays     int32
	CreatedAt        time.Time
	UpdatedAt        time.Time
	AdditionalInfo   sql.NullString
	Files            json.RawMessage
}

func (q *Queries) ListPaymentReceiptByRepresentativeID(ctx context.Context, representativeID int32) ([]ListPaymentReceiptByRepresentativeIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentReceiptByRepresentativeID, representativeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPaymentReceiptByRepresentativeIDRow{}
	for rows.Next() {
		var i ListPaymentReceiptByRepresentativeIDRow
		if err := rows.Scan(
			&i.ID,
			&i.RepresentativeID,
			&i.TypePayment,
			&i.Status,
			&i.Description,
			&i.Amount,
			&i.ExpirationDate,
			&i.PaymentDate,
			&i.DocNumber,
			&i.Recipient,
			&i.PaymentForm,
			&i.IsActive,
			&i.Installment,
			&i.IntervalDays,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdditionalInfo,
			&i.Files,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentPaymentReceiptByID = `-- name: UpdatePaymentPaymentReceiptByID :one
UPDATE payment_receipt
SET description = COALESCE($2,description) ,
amount = COALESCE($3,amount),
expiration_date = COALESCE($4,expiration_date),
payment_date = COALESCE($5,payment_date),
doc_number = COALESCE($6,doc_number),
recipient = COALESCE($7,recipient),
payment_form = COALESCE($8,payment_form),
status = COALESCE($9,status),
additional_info = COALESCE($10,additional_info)
WHERE id = $1
    RETURNING id, representative_id, type_payment, status, description, amount, expiration_date, payment_date, doc_number, recipient, payment_form, is_active, installment, interval_days, created_at, updated_at, additional_info
`

type UpdatePaymentPaymentReceiptByIDParams struct {
	ID             int32
	Description    sql.NullString
	Amount         sql.NullString
	ExpirationDate sql.NullTime
	PaymentDate    sql.NullTime
	DocNumber      sql.NullString
	Recipient      sql.NullString
	PaymentForm    NullPaymentReceiptFormType
	Status         NullPaymentReceiptStatus
	AdditionalInfo sql.NullString
}

func (q *Queries) UpdatePaymentPaymentReceiptByID(ctx context.Context, arg UpdatePaymentPaymentReceiptByIDParams) (PaymentReceipt, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentPaymentReceiptByID,
		arg.ID,
		arg.Description,
		arg.Amount,
		arg.ExpirationDate,
		arg.PaymentDate,
		arg.DocNumber,
		arg.Recipient,
		arg.PaymentForm,
		arg.Status,
		arg.AdditionalInfo,
	)
	var i PaymentReceipt
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.TypePayment,
		&i.Status,
		&i.Description,
		&i.Amount,
		&i.ExpirationDate,
		&i.PaymentDate,
		&i.DocNumber,
		&i.Recipient,
		&i.PaymentForm,
		&i.IsActive,
		&i.Installment,
		&i.IntervalDays,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const uploadFilePaymentReceipt = `-- name: UploadFilePaymentReceipt :one
INSERT INTO files_payment_receipt (payment_receipt_id, url_file)
VALUES ($1, $2)
    RETURNING id, payment_receipt_id, url_file, created_at, updated_at
`

type UploadFilePaymentReceiptParams struct {
	PaymentReceiptID int32
	UrlFile          string
}

func (q *Queries) UploadFilePaymentReceipt(ctx context.Context, arg UploadFilePaymentReceiptParams) (FilesPaymentReceipt, error) {
	row := q.db.QueryRowContext(ctx, uploadFilePaymentReceipt, arg.PaymentReceiptID, arg.UrlFile)
	var i FilesPaymentReceipt
	err := row.Scan(
		&i.ID,
		&i.PaymentReceiptID,
		&i.UrlFile,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
