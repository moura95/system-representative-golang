// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: activity.sql

package repository

import (
	"context"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activity (action, reference_url, user_id, representative_id)
VALUES ($1, $2, $3, $4)
RETURNING id, action, reference_url, user_id, representative_id, created_at
`

type CreateActivityParams struct {
	Action           string
	ReferenceUrl     string
	UserID           int32
	RepresentativeID int32
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.Action,
		arg.ReferenceUrl,
		arg.UserID,
		arg.RepresentativeID,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.ReferenceUrl,
		&i.UserID,
		&i.RepresentativeID,
		&i.CreatedAt,
	)
	return i, err
}

const listActivity = `-- name: ListActivity :many
SELECT id, action, reference_url, user_id, representative_id, created_at
FROM activity
`

func (q *Queries) ListActivity(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.ReferenceUrl,
			&i.UserID,
			&i.RepresentativeID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivityByRepresentativeID = `-- name: ListActivityByRepresentativeID :many
SELECT id, action, reference_url, user_id, representative_id, created_at
FROM activity
WHERE representative_id = $1
`

func (q *Queries) ListActivityByRepresentativeID(ctx context.Context, representativeID int32) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivityByRepresentativeID, representativeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.ReferenceUrl,
			&i.UserID,
			&i.RepresentativeID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActivityByUserID = `-- name: ListActivityByUserID :many
SELECT id, action, reference_url, user_id, representative_id, created_at
FROM activity
WHERE user_id = $1
`

func (q *Queries) ListActivityByUserID(ctx context.Context, userID int32) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivityByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.ReferenceUrl,
			&i.UserID,
			&i.RepresentativeID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
