// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: order_items.sql

package repository

import (
	"context"
	"database/sql"
)

const createOrderItems = `-- name: CreateOrderItems :one
INSERT INTO order_items (order_id, product_id, quantity, price, discount)
VALUES ($1, $2, $3, $4, $5)
RETURNING order_id, product_id, quantity, price, discount, total
`

type CreateOrderItemsParams struct {
	OrderID   int32
	ProductID int32
	Quantity  int32
	Price     string
	Discount  string
}

func (q *Queries) CreateOrderItems(ctx context.Context, arg CreateOrderItemsParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItems,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
		arg.Discount,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.Total,
	)
	return i, err
}

const deleteOrderItemsByID = `-- name: DeleteOrderItemsByID :exec
DELETE
FROM order_items
WHERE order_id = $1
  AND product_id = $2
`

type DeleteOrderItemsByIDParams struct {
	OrderID   int32
	ProductID int32
}

func (q *Queries) DeleteOrderItemsByID(ctx context.Context, arg DeleteOrderItemsByIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItemsByID, arg.OrderID, arg.ProductID)
	return err
}

const getOrderItemsByID = `-- name: GetOrderItemsByID :one
SELECT p.name        AS product_name,
       p.ipi         AS ipi,
       p.description AS description,
       p.code        AS code,
       oi.order_id, oi.product_id, oi.quantity, oi.price, oi.discount, oi.total
FROM order_items oi
         JOIN products p on oi.product_id = p.id
WHERE oi.order_id = $1
  AND oi.product_id = $2
`

type GetOrderItemsByIDParams struct {
	OrderID   int32
	ProductID int32
}

type GetOrderItemsByIDRow struct {
	ProductName string
	Ipi         sql.NullString
	Description sql.NullString
	Code        string
	OrderID     int32
	ProductID   int32
	Quantity    int32
	Price       string
	Discount    string
	Total       string
}

func (q *Queries) GetOrderItemsByID(ctx context.Context, arg GetOrderItemsByIDParams) (GetOrderItemsByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderItemsByID, arg.OrderID, arg.ProductID)
	var i GetOrderItemsByIDRow
	err := row.Scan(
		&i.ProductName,
		&i.Ipi,
		&i.Description,
		&i.Code,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.Total,
	)
	return i, err
}

const listOrdersItemsByOrderID = `-- name: ListOrdersItemsByOrderID :many
SELECT p.name        AS product_name,
       p.ipi         AS ipi,
       p.description AS description,
       p.code        AS code,
       oi.order_id, oi.product_id, oi.quantity, oi.price, oi.discount, oi.total
FROM order_items oi
         JOIN products p ON oi.product_id = p.id
WHERE oi.order_id = $1
ORDER BY oi.ctid
`

type ListOrdersItemsByOrderIDRow struct {
	ProductName string
	Ipi         sql.NullString
	Description sql.NullString
	Code        string
	OrderID     int32
	ProductID   int32
	Quantity    int32
	Price       string
	Discount    string
	Total       string
}

func (q *Queries) ListOrdersItemsByOrderID(ctx context.Context, orderID int32) ([]ListOrdersItemsByOrderIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrdersItemsByOrderIDRow{}
	for rows.Next() {
		var i ListOrdersItemsByOrderIDRow
		if err := rows.Scan(
			&i.ProductName,
			&i.Ipi,
			&i.Description,
			&i.Code,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
			&i.Discount,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItemByID = `-- name: UpdateOrderItemByID :one
UPDATE order_items
SET quantity = COALESCE($3, quantity),
    price    = COALESCE($4, price),
    discount = COALESCE($5, discount)
WHERE order_id = $1
  AND product_id = $2
RETURNING order_id, product_id, quantity, price, discount, total
`

type UpdateOrderItemByIDParams struct {
	OrderID   int32
	ProductID int32
	Quantity  sql.NullInt32
	Price     sql.NullString
	Discount  sql.NullString
}

func (q *Queries) UpdateOrderItemByID(ctx context.Context, arg UpdateOrderItemByIDParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItemByID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
		arg.Discount,
	)
	var i OrderItem
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.Discount,
		&i.Total,
	)
	return i, err
}
