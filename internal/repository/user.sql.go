// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user.sql

package repository

import (
	"context"
	"database/sql"
)

const addUserPermission = `-- name: AddUserPermission :one
INSERT INTO user_permissions (user_id, permission_id)
VALUES ($1, $2)
RETURNING user_id, permission_id
`

type AddUserPermissionParams struct {
	UserID       int32
	PermissionID int32
}

func (q *Queries) AddUserPermission(ctx context.Context, arg AddUserPermissionParams) (UserPermission, error) {
	row := q.db.QueryRowContext(ctx, addUserPermission, arg.UserID, arg.PermissionID)
	var i UserPermission
	err := row.Scan(&i.UserID, &i.PermissionID)
	return i, err
}

const changePasswordUserByID = `-- name: ChangePasswordUserByID :exec
UPDATE users
SET password   = $2,
    updated_at = NOW()
WHERE id = $1
`

type ChangePasswordUserByIDParams struct {
	ID          int32
	NewPassword string
}

func (q *Queries) ChangePasswordUserByID(ctx context.Context, arg ChangePasswordUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, changePasswordUserByID, arg.ID, arg.NewPassword)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (representative_id, cpf, first_name, last_name, email, password, phone)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
`

type CreateUserParams struct {
	RepresentativeID int32
	Cpf              sql.NullString
	FirstName        string
	LastName         string
	Email            string
	Password         string
	Phone            sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.RepresentativeID,
		arg.Cpf,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
UPDATE users
SET is_active = FALSE
WHERE id = $1
  AND is_active = TRUE
RETURNING id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEmailAndNameByRepresentativeID = `-- name: GetEmailAndNameByRepresentativeID :one
SELECT email, name
FROM representatives
WHERE id = $1
`

type GetEmailAndNameByRepresentativeIDRow struct {
	Email sql.NullString
	Name  sql.NullString
}

func (q *Queries) GetEmailAndNameByRepresentativeID(ctx context.Context, id int32) (GetEmailAndNameByRepresentativeIDRow, error) {
	row := q.db.QueryRowContext(ctx, getEmailAndNameByRepresentativeID, id)
	var i GetEmailAndNameByRepresentativeIDRow
	err := row.Scan(&i.Email, &i.Name)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPasswordByID = `-- name: GetUserPasswordByID :one
SELECT password
FROM users
WHERE id = $1
`

func (q *Queries) GetUserPasswordByID(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByID, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserPermissionAndName = `-- name: GetUserPermissionAndName :many
SELECT p.name
FROM user_permissions u
         JOIN permissions p
              ON u.permission_id = p.id
WHERE u.user_id = $1
`

func (q *Queries) GetUserPermissionAndName(ctx context.Context, userID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissionAndName, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersByRepresentativeID = `-- name: ListUsersByRepresentativeID :many
SELECT id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
FROM users
WHERE representative_id = $1
  AND is_active = $2
`

type ListUsersByRepresentativeIDParams struct {
	RepresentativeID int32
	IsActive         bool
}

func (q *Queries) ListUsersByRepresentativeID(ctx context.Context, arg ListUsersByRepresentativeIDParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersByRepresentativeID, arg.RepresentativeID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.RepresentativeID,
			&i.Cpf,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.Phone,
			&i.IsActive,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserByID = `-- name: RemoveUserByID :one
DELETE
FROM users
WHERE id = $1
RETURNING id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
`

func (q *Queries) RemoveUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, removeUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeUserPermissionByID = `-- name: RemoveUserPermissionByID :one
DELETE
FROM user_permissions
WHERE user_id = $1
  AND permission_id = $2
RETURNING user_id, permission_id
`

type RemoveUserPermissionByIDParams struct {
	UserID       int32
	PermissionID int32
}

func (q *Queries) RemoveUserPermissionByID(ctx context.Context, arg RemoveUserPermissionByIDParams) (UserPermission, error) {
	row := q.db.QueryRowContext(ctx, removeUserPermissionByID, arg.UserID, arg.PermissionID)
	var i UserPermission
	err := row.Scan(&i.UserID, &i.PermissionID)
	return i, err
}

const restoreUserByID = `-- name: RestoreUserByID :one
UPDATE users
SET is_active  = TRUE,
    updated_at = NOW()
WHERE id = $1
  AND is_active = FALSE
RETURNING id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
`

func (q *Queries) RestoreUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, restoreUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users
SET last_login = NOW()
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateLastLogin, id)
	return err
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET password   = COALESCE($2, password),
    first_name = COALESCE($3, first_name),
    last_name  = COALESCE($4, last_name),
    phone      = COALESCE($5, phone),
    cpf        = COALESCE($6, cpf),
    updated_at = NOW()
WHERE id = $1
RETURNING id, representative_id, cpf, first_name, last_name, email, password, phone, is_active, last_login, created_at, updated_at
`

type UpdateUserByIDParams struct {
	ID        int32
	Password  sql.NullString
	FirstName sql.NullString
	LastName  sql.NullString
	Phone     sql.NullString
	Cpf       sql.NullString
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserByID,
		arg.ID,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Cpf,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Phone,
		&i.IsActive,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
