// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: company.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (representative_id, type, name, email, website, logo_url, street, number, city, state, zip_code,
                       cnpj,
                       fantasy_name, ie, phone)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING id, representative_id, type, cnpj, name, fantasy_name, ie, phone, email, website, logo_url, zip_code, state, city, street, number, is_active, created_at, updated_at
`

type CreateCompanyParams struct {
	RepresentativeID int32
	Type             CompanyTypes
	Name             string
	Email            sql.NullString
	Website          sql.NullString
	LogoUrl          sql.NullString
	Street           sql.NullString
	Number           sql.NullString
	City             sql.NullString
	State            sql.NullString
	ZipCode          sql.NullString
	Cnpj             sql.NullString
	FantasyName      sql.NullString
	Ie               sql.NullString
	Phone            sql.NullString
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.RepresentativeID,
		arg.Type,
		arg.Name,
		arg.Email,
		arg.Website,
		arg.LogoUrl,
		arg.Street,
		arg.Number,
		arg.City,
		arg.State,
		arg.ZipCode,
		arg.Cnpj,
		arg.FantasyName,
		arg.Ie,
		arg.Phone,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Type,
		&i.Cnpj,
		&i.Name,
		&i.FantasyName,
		&i.Ie,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.LogoUrl,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Street,
		&i.Number,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompanyByID = `-- name: DeleteCompanyByID :one
UPDATE companies
SET is_active  = FALSE,
    updated_at = NOW()
WHERE id = $1
  AND is_active = TRUE
RETURNING id, representative_id, type, cnpj, name, fantasy_name, ie, phone, email, website, logo_url, zip_code, state, city, street, number, is_active, created_at, updated_at
`

func (q *Queries) DeleteCompanyByID(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, deleteCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Type,
		&i.Cnpj,
		&i.Name,
		&i.FantasyName,
		&i.Ie,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.LogoUrl,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Street,
		&i.Number,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, representative_id, type, cnpj, name, fantasy_name, ie, phone, email, website, logo_url, zip_code, state, city, street, number, is_active, created_at, updated_at
FROM companies
WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Type,
		&i.Cnpj,
		&i.Name,
		&i.FantasyName,
		&i.Ie,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.LogoUrl,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Street,
		&i.Number,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyUserByID = `-- name: GetCompanyUserByID :one
SELECT c.id, representative_id, type, c.cnpj, c.name, c.fantasy_name, c.ie, c.phone, c.email, c.website, c.logo_url, c.zip_code, c.state, c.city, c.street, c.number, c.is_active, c.created_at, c.updated_at, r.id, r.cnpj, r.name, r.fantasy_name, r.ie, r.phone, r.email, r.website, r.logo_url, r.zip_code, r.state, r.city, r.street, r.number, plan, stripe_id, data_expire, r.is_active, r.created_at, r.updated_at
FROM companies c
         JOIN representatives r on r.id = c.representative_id
WHERE r.id = $1
  AND c.id = $2
`

type GetCompanyUserByIDParams struct {
	RepresentativeID int32
	CompanyID        int32
}

type GetCompanyUserByIDRow struct {
	ID               int32
	RepresentativeID int32
	Type             CompanyTypes
	Cnpj             sql.NullString
	Name             string
	FantasyName      sql.NullString
	Ie               sql.NullString
	Phone            sql.NullString
	Email            sql.NullString
	Website          sql.NullString
	LogoUrl          sql.NullString
	ZipCode          sql.NullString
	State            sql.NullString
	City             sql.NullString
	Street           sql.NullString
	Number           sql.NullString
	IsActive         bool
	CreatedAt        time.Time
	UpdatedAt        time.Time
	ID_2             int32
	Cnpj_2           sql.NullString
	Name_2           sql.NullString
	FantasyName_2    sql.NullString
	Ie_2             sql.NullString
	Phone_2          sql.NullString
	Email_2          sql.NullString
	Website_2        sql.NullString
	LogoUrl_2        sql.NullString
	ZipCode_2        sql.NullString
	State_2          sql.NullString
	City_2           sql.NullString
	Street_2         sql.NullString
	Number_2         sql.NullString
	Plan             PlanTypes
	StripeID         sql.NullString
	DataExpire       time.Time
	IsActive_2       bool
	CreatedAt_2      time.Time
	UpdatedAt_2      time.Time
}

func (q *Queries) GetCompanyUserByID(ctx context.Context, arg GetCompanyUserByIDParams) (GetCompanyUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCompanyUserByID, arg.RepresentativeID, arg.CompanyID)
	var i GetCompanyUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Type,
		&i.Cnpj,
		&i.Name,
		&i.FantasyName,
		&i.Ie,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.LogoUrl,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Street,
		&i.Number,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Cnpj_2,
		&i.Name_2,
		&i.FantasyName_2,
		&i.Ie_2,
		&i.Phone_2,
		&i.Email_2,
		&i.Website_2,
		&i.LogoUrl_2,
		&i.ZipCode_2,
		&i.State_2,
		&i.City_2,
		&i.Street_2,
		&i.Number_2,
		&i.Plan,
		&i.StripeID,
		&i.DataExpire,
		&i.IsActive_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const listCompaniesByRepresentativeID = `-- name: ListCompaniesByRepresentativeID :many
SELECT id, representative_id, type, cnpj, name, fantasy_name, ie, phone, email, website, logo_url, zip_code, state, city, street, number, is_active, created_at, updated_at
FROM companies
WHERE representative_id = $1
  AND type = $2
  AND is_active = $3
`

type ListCompaniesByRepresentativeIDParams struct {
	RepresentativeID int32
	Type             CompanyTypes
	IsActive         bool
}

func (q *Queries) ListCompaniesByRepresentativeID(ctx context.Context, arg ListCompaniesByRepresentativeIDParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompaniesByRepresentativeID, arg.RepresentativeID, arg.Type, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.RepresentativeID,
			&i.Type,
			&i.Cnpj,
			&i.Name,
			&i.FantasyName,
			&i.Ie,
			&i.Phone,
			&i.Email,
			&i.Website,
			&i.LogoUrl,
			&i.ZipCode,
			&i.State,
			&i.City,
			&i.Street,
			&i.Number,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCompanyByID = `-- name: RemoveCompanyByID :one
DELETE
FROM companies
WHERE id = $1
RETURNING id, representative_id, type, cnpj, name, fantasy_name, ie, phone, email, website, logo_url, zip_code, state, city, street, number, is_active, created_at, updated_at
`

func (q *Queries) RemoveCompanyByID(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, removeCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Type,
		&i.Cnpj,
		&i.Name,
		&i.FantasyName,
		&i.Ie,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.LogoUrl,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Street,
		&i.Number,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const restoreCompanyByID = `-- name: RestoreCompanyByID :one
UPDATE companies
SET is_active  = TRUE,
    updated_at = NOW()
WHERE id = $1
  AND is_active = FALSE
RETURNING id, representative_id, type, cnpj, name, fantasy_name, ie, phone, email, website, logo_url, zip_code, state, city, street, number, is_active, created_at, updated_at
`

func (q *Queries) RestoreCompanyByID(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, restoreCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Type,
		&i.Cnpj,
		&i.Name,
		&i.FantasyName,
		&i.Ie,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.LogoUrl,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Street,
		&i.Number,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCompanyByID = `-- name: UpdateCompanyByID :one
UPDATE companies
SET cnpj        = COALESCE($2, cnpj),
    name        = COALESCE($3, name),
    fantasy_name= COALESCE($4, fantasy_name),
    ie          = COALESCE($5, ie),
    phone       = COALESCE($6, phone),
    email       = COALESCE($7, email),
    website     = COALESCE($8, website),
    logo_url    = COALESCE($9, logo_url),
    zip_code    = COALESCE($10, zip_code),
    state       = COALESCE($11, state),
    city        = COALESCE($12, city),
    street      = COALESCE($13, street),
    number      = COALESCE($14, number),
    updated_at  = NOW()
WHERE id = $1
RETURNING id, representative_id, type, cnpj, name, fantasy_name, ie, phone, email, website, logo_url, zip_code, state, city, street, number, is_active, created_at, updated_at
`

type UpdateCompanyByIDParams struct {
	ID          int32
	Cnpj        sql.NullString
	Name        sql.NullString
	FantasyName sql.NullString
	Ie          sql.NullString
	Phone       sql.NullString
	Email       sql.NullString
	Website     sql.NullString
	LogoUrl     sql.NullString
	ZipCode     sql.NullString
	State       sql.NullString
	City        sql.NullString
	Street      sql.NullString
	Number      sql.NullString
}

func (q *Queries) UpdateCompanyByID(ctx context.Context, arg UpdateCompanyByIDParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompanyByID,
		arg.ID,
		arg.Cnpj,
		arg.Name,
		arg.FantasyName,
		arg.Ie,
		arg.Phone,
		arg.Email,
		arg.Website,
		arg.LogoUrl,
		arg.ZipCode,
		arg.State,
		arg.City,
		arg.Street,
		arg.Number,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Type,
		&i.Cnpj,
		&i.Name,
		&i.FantasyName,
		&i.Ie,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.LogoUrl,
		&i.ZipCode,
		&i.State,
		&i.City,
		&i.Street,
		&i.Number,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
