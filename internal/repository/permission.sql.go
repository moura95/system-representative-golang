// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: permission.sql

package repository

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreatePermission(ctx context.Context, name string) (Permission, error) {
	row := q.db.QueryRowContext(ctx, createPermission, name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deletePermissionByID = `-- name: DeletePermissionByID :one
DELETE
FROM permissions
WHERE id = $1
RETURNING id, name
`

func (q *Queries) DeletePermissionByID(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRowContext(ctx, deletePermissionByID, id)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name
FROM permissions
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT id, name
FROM permissions
WHERE id = $1
`

func (q *Queries) GetPermissionByID(ctx context.Context, id int32) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionByID, id)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updatePermissionByID = `-- name: UpdatePermissionByID :one
UPDATE permissions
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdatePermissionByIDParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdatePermissionByID(ctx context.Context, arg UpdatePermissionByIDParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, updatePermissionByID, arg.ID, arg.Name)
	var i Permission
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
