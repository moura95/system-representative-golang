// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: calendar.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createCalendar = `-- name: CreateCalendar :one
INSERT INTO calendars (title, visit_start, visit_end, allday, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, visit_start, visit_end, allday, user_id
`

type CreateCalendarParams struct {
	Title      string
	VisitStart time.Time
	VisitEnd   time.Time
	Allday     bool
	UserID     int32
}

func (q *Queries) CreateCalendar(ctx context.Context, arg CreateCalendarParams) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, createCalendar,
		arg.Title,
		arg.VisitStart,
		arg.VisitEnd,
		arg.Allday,
		arg.UserID,
	)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.VisitStart,
		&i.VisitEnd,
		&i.Allday,
		&i.UserID,
	)
	return i, err
}

const deleteCalendarByID = `-- name: DeleteCalendarByID :one
DELETE
FROM calendars
WHERE id = $1
RETURNING id, title, visit_start, visit_end, allday, user_id
`

func (q *Queries) DeleteCalendarByID(ctx context.Context, id int32) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, deleteCalendarByID, id)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.VisitStart,
		&i.VisitEnd,
		&i.Allday,
		&i.UserID,
	)
	return i, err
}

const getCalendarByID = `-- name: GetCalendarByID :one
SELECT id, title, visit_start, visit_end, allday, user_id
FROM calendars
WHERE id = $1
`

func (q *Queries) GetCalendarByID(ctx context.Context, id int32) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, getCalendarByID, id)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.VisitStart,
		&i.VisitEnd,
		&i.Allday,
		&i.UserID,
	)
	return i, err
}

const listCalendarsByUserID = `-- name: ListCalendarsByUserID :many
SELECT id, title, visit_start, visit_end, allday, user_id
FROM calendars
WHERE user_id = $1
`

func (q *Queries) ListCalendarsByUserID(ctx context.Context, userID int32) ([]Calendar, error) {
	rows, err := q.db.QueryContext(ctx, listCalendarsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Calendar{}
	for rows.Next() {
		var i Calendar
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.VisitStart,
			&i.VisitEnd,
			&i.Allday,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCalendarByID = `-- name: UpdateCalendarByID :one
UPDATE calendars
SET title       = COALESCE($2, title),
    visit_start = COALESCE($3, visit_start),
    visit_end   = COALESCE($4, visit_end),
    allday = COALESCE($5, allday)
WHERE id = $1
RETURNING id, title, visit_start, visit_end, allday, user_id
`

type UpdateCalendarByIDParams struct {
	ID         int32
	Title      sql.NullString
	VisitStart sql.NullTime
	VisitEnd   sql.NullTime
	Allday     sql.NullBool
}

func (q *Queries) UpdateCalendarByID(ctx context.Context, arg UpdateCalendarByIDParams) (Calendar, error) {
	row := q.db.QueryRowContext(ctx, updateCalendarByID,
		arg.ID,
		arg.Title,
		arg.VisitStart,
		arg.VisitEnd,
		arg.Allday,
	)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.VisitStart,
		&i.VisitEnd,
		&i.Allday,
		&i.UserID,
	)
	return i, err
}
