// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: seller.sql

package repository

import (
	"context"
	"database/sql"
)

const createSellers = `-- name: CreateSellers :one
INSERT INTO sellers (representative_id, name, pix, email, phone, observation, cpf)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, representative_id, cpf, name, phone, email, pix, observation, is_active, created_at, updated_at
`

type CreateSellersParams struct {
	RepresentativeID int32
	Name             string
	Pix              sql.NullString
	Email            sql.NullString
	Phone            sql.NullString
	Observation      sql.NullString
	Cpf              string
}

func (q *Queries) CreateSellers(ctx context.Context, arg CreateSellersParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, createSellers,
		arg.RepresentativeID,
		arg.Name,
		arg.Pix,
		arg.Email,
		arg.Phone,
		arg.Observation,
		arg.Cpf,
	)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Pix,
		&i.Observation,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSellerByID = `-- name: DeleteSellerByID :one
UPDATE sellers
SET is_active = FALSE
WHERE id = $1
  AND is_active = TRUE
RETURNING id, representative_id, cpf, name, phone, email, pix, observation, is_active, created_at, updated_at
`

func (q *Queries) DeleteSellerByID(ctx context.Context, id int32) (Seller, error) {
	row := q.db.QueryRowContext(ctx, deleteSellerByID, id)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Pix,
		&i.Observation,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSellerByID = `-- name: GetSellerByID :one
SELECT id, representative_id, cpf, name, phone, email, pix, observation, is_active, created_at, updated_at
FROM sellers
WHERE id = $1
`

func (q *Queries) GetSellerByID(ctx context.Context, id int32) (Seller, error) {
	row := q.db.QueryRowContext(ctx, getSellerByID, id)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Pix,
		&i.Observation,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSellersByRepresentativeID = `-- name: ListSellersByRepresentativeID :many
SELECT id, representative_id, cpf, name, phone, email, pix, observation, is_active, created_at, updated_at
FROM sellers
WHERE representative_id = $1
AND is_active = $2
`

type ListSellersByRepresentativeIDParams struct {
	RepresentativeID int32
	IsActive         bool
}

func (q *Queries) ListSellersByRepresentativeID(ctx context.Context, arg ListSellersByRepresentativeIDParams) ([]Seller, error) {
	rows, err := q.db.QueryContext(ctx, listSellersByRepresentativeID, arg.RepresentativeID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Seller{}
	for rows.Next() {
		var i Seller
		if err := rows.Scan(
			&i.ID,
			&i.RepresentativeID,
			&i.Cpf,
			&i.Name,
			&i.Phone,
			&i.Email,
			&i.Pix,
			&i.Observation,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSellerByID = `-- name: RemoveSellerByID :one
DELETE
FROM sellers
WHERE id = $1
RETURNING id, representative_id, cpf, name, phone, email, pix, observation, is_active, created_at, updated_at
`

func (q *Queries) RemoveSellerByID(ctx context.Context, id int32) (Seller, error) {
	row := q.db.QueryRowContext(ctx, removeSellerByID, id)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Pix,
		&i.Observation,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const restoreSellerByID = `-- name: RestoreSellerByID :one
UPDATE sellers
SET is_active  = TRUE,
    updated_at = NOW()
WHERE id = $1
  AND is_active = FALSE
RETURNING id, representative_id, cpf, name, phone, email, pix, observation, is_active, created_at, updated_at
`

func (q *Queries) RestoreSellerByID(ctx context.Context, id int32) (Seller, error) {
	row := q.db.QueryRowContext(ctx, restoreSellerByID, id)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Pix,
		&i.Observation,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSellerByID = `-- name: UpdateSellerByID :one
UPDATE sellers
SET name        = COALESCE($2, name),
    pix         = COALESCE($3, pix),
    email       = COALESCE($4, email),
    phone       = COALESCE($5, phone),
    observation = COALESCE($6, observation),
    cpf         = COALESCE($7, cpf),
    updated_at  = NOW()
WHERE id = $1
RETURNING id, representative_id, cpf, name, phone, email, pix, observation, is_active, created_at, updated_at
`

type UpdateSellerByIDParams struct {
	ID          int32
	Name        sql.NullString
	Pix         sql.NullString
	Email       sql.NullString
	Phone       sql.NullString
	Observation sql.NullString
	Cpf         sql.NullString
}

func (q *Queries) UpdateSellerByID(ctx context.Context, arg UpdateSellerByIDParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, updateSellerByID,
		arg.ID,
		arg.Name,
		arg.Pix,
		arg.Email,
		arg.Phone,
		arg.Observation,
		arg.Cpf,
	)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.RepresentativeID,
		&i.Cpf,
		&i.Name,
		&i.Phone,
		&i.Email,
		&i.Pix,
		&i.Observation,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
