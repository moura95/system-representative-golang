// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: payment_form.sql

package repository

import (
	"context"
)

const createPaymentForm = `-- name: CreatePaymentForm :one
INSERT INTO form_payments(name, representative_id)
VALUES ($1, $2)
RETURNING id, representative_id, name
`

type CreatePaymentFormParams struct {
	Name             string
	RepresentativeID int32
}

func (q *Queries) CreatePaymentForm(ctx context.Context, arg CreatePaymentFormParams) (FormPayment, error) {
	row := q.db.QueryRowContext(ctx, createPaymentForm, arg.Name, arg.RepresentativeID)
	var i FormPayment
	err := row.Scan(&i.ID, &i.RepresentativeID, &i.Name)
	return i, err
}

const deletePaymentFormByID = `-- name: DeletePaymentFormByID :one
DELETE
FROM form_payments
WHERE id = $1
RETURNING id, representative_id, name
`

func (q *Queries) DeletePaymentFormByID(ctx context.Context, id int32) (FormPayment, error) {
	row := q.db.QueryRowContext(ctx, deletePaymentFormByID, id)
	var i FormPayment
	err := row.Scan(&i.ID, &i.RepresentativeID, &i.Name)
	return i, err
}

const getPaymentFormByID = `-- name: GetPaymentFormByID :one
SELECT id, representative_id, name
FROM form_payments
WHERE id = $1
`

func (q *Queries) GetPaymentFormByID(ctx context.Context, id int32) (FormPayment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentFormByID, id)
	var i FormPayment
	err := row.Scan(&i.ID, &i.RepresentativeID, &i.Name)
	return i, err
}

const listPaymentFormsByRepresentativeID = `-- name: ListPaymentFormsByRepresentativeID :many
SELECT id, representative_id, name
FROM form_payments
WHERE representative_id = $1
`

func (q *Queries) ListPaymentFormsByRepresentativeID(ctx context.Context, representativeID int32) ([]FormPayment, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentFormsByRepresentativeID, representativeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FormPayment{}
	for rows.Next() {
		var i FormPayment
		if err := rows.Scan(&i.ID, &i.RepresentativeID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentFormByID = `-- name: UpdatePaymentFormByID :one
UPDATE form_payments
SET name = $1
WHERE id = $2
RETURNING id, representative_id, name
`

type UpdatePaymentFormByIDParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdatePaymentFormByID(ctx context.Context, arg UpdatePaymentFormByIDParams) (FormPayment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentFormByID, arg.Name, arg.ID)
	var i FormPayment
	err := row.Scan(&i.ID, &i.RepresentativeID, &i.Name)
	return i, err
}
